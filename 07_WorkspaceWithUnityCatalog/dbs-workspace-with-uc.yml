AWSTemplateFormatVersion: 2010-09-09
Description: Deploying the resources for a Databricks Workspace with a Unity Catalog metastore

#-------------------------------------------------------------------------
Parameters:

  DBSAccountId:
    Description: The Databricks account id
    Type: String

  DBSUsername:
    Description: The Databricks account user name
    Type: String

  DBSPassword:
    Description: The Databricks account password
    Type: String
    NoEcho: true
  
  ResourceOwner:
    Description: The value of the Owner tag in the created resources
    Type: String

  DBFSRootBucketName:
    Description: The name of the bucket holding the Databricks workspace data (DBFS)
    Type: String
    AllowedPattern: '(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)'
    ConstraintDescription: 3 to 63 characters; must contain only lowercase letters, numbers, periods (.), and dashes (-)

  UCMetastoreDefaultStorageBucketName:
    Description: The value of the S3 bucket used for the default storage of the managed tables in the metastore
    Type: String
    Default: ''

  DeltaSharingTokenLifetimeSeconds:
    Description: The token lifetime in seconds for Delta Sharing
    Type: Number
    Default: 0

  DeltaSharingOrgName:
    Description: The organisation name for Databricks-to-Databricks Delta Sharing
    Type: String
    Default: ''

Conditions:
  ShouldCreateMetastore: !Not [ !Equals [ !Ref UCMetastoreDefaultStorageBucketName, '' ] ]
  IsDeltaSharingEnabled: !Not [ !Equals [ !Ref DeltaSharingTokenLifetimeSeconds, 0 ] ]
  IsDeltaSharingOrgSpecified: !Not [ !Equals [ !Ref DeltaSharingOrgName, '' ] ]

Resources:

  # The databricks addresses
  DatabricksAddresses:
    Type: Custom::DatabricksAddresses
    Properties:
      ServiceToken: !ImportValue dbs-account-api-DatabricksAddressesFn-Arn

  # The Bucket for the metastore
  UCMetastoreDefaultStorageBucket:
    Condition: ShouldCreateMetastore
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref UCMetastoreDefaultStorageBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault: 
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner

  # The IAM role for the storage credentials
  StorageCredentialsIAMRole:
    Condition: ShouldCreateMetastore
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-UCMetastoreCredentials-${AWS::Region}
      Description: The cross-account IAM role used by Databricks Unity Catalog to access the storage on S3
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              "AWS": arn:aws:iam::414351767826:role/unity-catalog-prod-UCMasterRole-14S5ZJVKOTYTL
            Action:
              - sts:AssumeRole
            Condition:
              "StringEquals":
                "sts:ExternalId": !Ref DBSAccountId
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-UCMetastoreCredentials-${AWS::Region}-Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: NonResourceBasedPermissions
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:PutLifecycleConfiguration
                Resource:
                  - !GetAtt UCMetastoreDefaultStorageBucket.Arn
                  - !Sub ${UCMetastoreDefaultStorageBucket.Arn}/*

  # The Metastore
  UnityCatalogMetastore:
    Condition: ShouldCreateMetastore
    Type: Custom::UnityCatalogMetastore
    Properties:
      ServiceToken: !ImportValue dbs-account-api-UCMetastoreFn-Arn
      DatabricksAccountId: !Ref DBSAccountId
      Username: !Ref DBSUsername
      Password: !Ref DBSPassword
      Name: !Sub default-${AWS::Region}
      Bucket: !Ref UCMetastoreDefaultStorageBucket
      StorageCredentialsRole: !GetAtt StorageCredentialsIAMRole.Arn
      DeltaSharingTokenLifetimeSeconds: !If [IsDeltaSharingEnabled, !Ref DeltaSharingTokenLifetimeSeconds, !Ref AWS::NoValue]
      DeltaSharingOrganisationName: !If [IsDeltaSharingOrgSpecified, !Ref DeltaSharingOrgName, !Ref AWS::NoValue]

    # The root bucket
  DBFSRootBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DBFSRootBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault: 
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
  
  DBFSRootBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DBFSRootBucket
      PolicyDocument:
        Statement:
          - Sid: Grant Databricks Access to Root S3
            Effect: Allow
            Principal:
              "AWS": "414351767826"
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${DBFSRootBucketName}
              - !Sub arn:${AWS::Partition}:s3:::${DBFSRootBucketName}/*

  # The VPC
  DBSVpc:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.52.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksVPC

  # Internet gateway
  DBSVpcIgw:
    Type: AWS::EC2::InternetGateway
    DependsOn: DBSVpc
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksVpcIgw
  #... attached to the VPC
  DBSVpcIgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !GetAtt DBSVpcIgw.InternetGatewayId
      VpcId: !Ref DBSVpc

  # The subnet for the NAT Gateway
  DBSNatSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref DBSVpc
      CidrBlock: 10.52.0.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksNatSubnet

  # The subnets for the VPC Endpoints
  DBSEndpointSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref DBSVpc
      CidrBlock: 10.52.6.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksEndpointSubnet1
  DBSEndpointSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref DBSVpc
      CidrBlock: 10.52.7.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksEndpointSubnet2

  # The private subnets for the Databricks clusters
  DBSClusterSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref DBSVpc
      CidrBlock: 10.52.160.0/19
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksClusterSubnet1
  DBSClusterSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref DBSVpc
      CidrBlock: 10.52.192.0/19
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksClusterSubnet2

  # The Elastic IP for the NAT Gateway
  ElasticIPForNat:
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksNatElasticIP

  # The NAT gateway
  DBSNat:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt ElasticIPForNat.AllocationId
      ConnectivityType: public
      SubnetId: !Ref DBSNatSubnet
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksNat

  # The route table attached to the nat subnet
  DBSNatRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref DBSVpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksNatRouteTable

  # Routes to the internet
  RouteToInternetInNatRouteTable:
    DependsOn: DBSVpcIgwAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DBSNatRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref DBSVpcIgw

  # Associate the route table to the subnet where the NAT gateway is installed
  NatSubnetRouteTableAssociation:
    DependsOn: RouteToInternetInNatRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBSNatRouteTable
      SubnetId: !Ref DBSNatSubnet

  # The route table for the private subnets
  DBSPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DBSVpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DatabricksPrivateRouteTable

  # Routes to the internet go to the NAT gateway
  RouteToInternetInPrivateRouteTable:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DBSPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref DBSNat

  # Associate the route table to the subnets where the Databricks clusters are deployed
  PrivateSubnet1RouteTableAssociation:
    DependsOn: RouteToInternetInPrivateRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBSPrivateRouteTable
      SubnetId: !Ref DBSClusterSubnet1
  PrivateSubnet2RouteTableAssociation:
    DependsOn: RouteToInternetInPrivateRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBSPrivateRouteTable
      SubnetId: !Ref DBSClusterSubnet2

  # The security group for the workspace
  DBSWorkspaceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${AWS::StackName}-DBSWorkspaceSG
      VpcId: !Ref DBSVpc
      GroupDescription: Allow access from within the same security group
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DBSWorkspaceSG

  # Allow all access from the same security group
  DBSWorkspaceSecurityGroupDefaultTcpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !GetAtt DBSWorkspaceSecurityGroup.GroupId
      Description: Allow all tcp inbound access from the same security group
      SourceSecurityGroupId: !GetAtt DBSWorkspaceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
  DBSWorkspaceSecurityGroupDefaultUdpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !GetAtt DBSWorkspaceSecurityGroup.GroupId
      Description: Allow all udp inbound access from the same security group
      SourceSecurityGroupId: !GetAtt DBSWorkspaceSecurityGroup.GroupId
      IpProtocol: udp
      FromPort: 0
      ToPort: 65535
  DBSWorkspaceSecurityGroupDefaultTcpEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt DBSWorkspaceSecurityGroup.GroupId
      Description: Allow all tcp output access from the same security group
      DestinationSecurityGroupId: !GetAtt DBSWorkspaceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
  DBSWorkspaceSecurityGroupDefaultUdpEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt DBSWorkspaceSecurityGroup.GroupId
      Description: Allow all udp output access from the same security group
      DestinationSecurityGroupId: !GetAtt DBSWorkspaceSecurityGroup.GroupId
      IpProtocol: udp
      FromPort: 0
      ToPort: 65535

  # Allow egress to https
  DBSWorkspaceSecurityGroupEgressForHttps:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt DBSWorkspaceSecurityGroup.GroupId
      Description: Allow accessing Databricks infrastructure, cloud data sources, and library repositories
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  # Allow egress to the hive metastore (mysql port)
  DBSWorkspaceSecurityGroupEgressForMetastore:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt DBSWorkspaceSecurityGroup.GroupId
      Description: Allow accessing the Databricks metastore
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306

  # The S3 gateway endpoint
  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      VpcId: !Ref DBSVpc
      RouteTableIds:
        - !Ref DBSPrivateRouteTable

  # The STS VPC endpoint
  STSInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      ServiceName: !Sub com.amazonaws.${AWS::Region}.sts
      VpcEndpointType: Interface
      VpcId: !Ref DBSVpc
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt DBSWorkspaceSecurityGroup.GroupId
      SubnetIds:
        - !Ref DBSEndpointSubnet1
        - !Ref DBSEndpointSubnet2
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              "AWS": !Ref AWS::AccountId
            Action:
              - sts:AssumeRole
              - sts:GetAccessKeyInfo
              - sts:GetSessionToken
              - sts:DecodeAuthorizationMessage
              - sts:TagSession
            Resource: "*"
          - Effect: Allow
            Principal:
              "AWS":
                - arn:aws:iam::414351767826:user/databricks-datasets-readonly-user
                - "414351767826"
            Action:
              - sts:AssumeRole
              - sts:GetSessionToken
              - sts:TagSession
            Resource: "*"

  # The Kinesis endpoint
  KinesisInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      ServiceName: !Sub com.amazonaws.${AWS::Region}.kinesis-streams
      VpcEndpointType: Interface
      VpcId: !Ref DBSVpc
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt DBSWorkspaceSecurityGroup.GroupId
      SubnetIds:
        - !Ref DBSEndpointSubnet1
        - !Ref DBSEndpointSubnet2
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              "AWS":
                - "414351767826"
                - !Ref AWS::AccountId
            Action:
              - kinesis:PutRecord
              - kinesis:PutRecords
              - kinesis:DescribeStream
            Resource: !Sub arn:${AWS::Partition}:kinesis:${AWS::Region}:414351767826:stream/*

  # The Databricks REST API (workspace) VPC endpoint
  DBSRestApiInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !GetAtt DatabricksAddresses.Workspace
      VpcEndpointType: Interface
      VpcId: !Ref DBSVpc
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref DBSWorkspaceSecurityGroup
      SubnetIds:
        - !Ref DBSEndpointSubnet1
        - !Ref DBSEndpointSubnet2

  # The Databricks backend (secure cluster connectivity relay) VPC endpoint
  DBSRelayInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !GetAtt DatabricksAddresses.Backend
      VpcEndpointType: Interface
      VpcId: !Ref DBSVpc
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref DBSWorkspaceSecurityGroup
      SubnetIds:
        - !Ref DBSEndpointSubnet1
        - !Ref DBSEndpointSubnet2

  # The cross account role for databricks
  DBSCrossAccountIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-CrossAccountRole
      Description: The cross-account IAM role used by Databricks to manage resources in the VPC
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              "AWS": "414351767826"
            Action:
              - 'sts:AssumeRole'
            Condition:
              "StringEquals":
                "sts:ExternalId": !Ref DBSAccountId
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-CrossAccountRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: NonResourceBasedPermissions
                Effect: Allow
                Action:
                  - ec2:CancelSpotInstanceRequests
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeIamInstanceProfileAssociations
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeInstances
                  - ec2:DescribeInternetGateways
                  - ec2:DescribeNatGateways
                  - ec2:DescribeNetworkAcls
                  - ec2:DescribePrefixLists
                  - ec2:DescribeReservedInstancesOfferings
                  - ec2:DescribeRouteTables
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSpotInstanceRequests
                  - ec2:DescribeSpotPriceHistory
                  - ec2:DescribeSubnets
                  - ec2:DescribeVolumes
                  - ec2:DescribeVpcAttribute
                  - ec2:DescribeVpcs
                  - ec2:CreateTags
                  - ec2:DeleteTags
                  - ec2:RequestSpotInstances
                  - ec2:RunInstances
                Resource: '*'
              - Sid: InstancePoolsSupport
                Effect: Allow
                Action:
                  - ec2:AssociateIamInstanceProfile
                  - ec2:DisassociateIamInstanceProfile
                  - ec2:ReplaceIamInstanceProfileAssociation
                Resource: !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
                Condition:
                  "StringEquals":
                    "ec2:ResourceTag/Vendor": "Databricks"
              - Sid: EC2TerminateInstancesTag
                Effect: Allow
                Action: ec2:TerminateInstances
                Resource: !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
                Condition:
                  "StringEquals":
                    "ec2:ResourceTag/Vendor": "Databricks"
              - Sid: EC2AttachDetachVolumeTag
                Effect: Allow
                Action:
                  - ec2:AttachVolume
                  - ec2:DetachVolume
                Resource:
                  - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
                  - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:volume/*
                Condition:
                  "StringEquals":
                    "ec2:ResourceTag/Vendor": "Databricks"
              - Sid: EC2CreateVolumeByTag
                Effect: Allow
                Action: ec2:CreateVolume
                Resource: !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:volume/*
                Condition:
                  "StringEquals":
                    "ec2:ResourceTag/Vendor": "Databricks"
              - Sid: EC2DeleteVolumeByTag
                Effect: Allow
                Action: ec2:DeleteVolume
                Resource: !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:volume/*
                Condition:
                  "StringEquals":
                    "ec2:ResourceTag/Vendor": "Databricks"
              - Sid: AllowCreateServiceLinkedRole
                Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                  - iam:PutRolePolicy
                Resource: arn:aws:iam::*:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot
                Condition:
                  "StringLike":
                    "iam:AWSServiceName": spot.amazonaws.com
              # This is only needed if we want to support instance profiles
              - Sid: AllowPassRoleForInstanceProfile
                Effect: Allow
                Action: iam:PassRole
                Resource: '*'
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner

  # The KMS CMK for the notebook encryption
  EncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key used by Databricks to encrypt/decrypt the notebooks for a workspace
      Enabled: true
      KeyPolicy:
        Statement:
          - Sid: Enable Owner Account Permissions
            Effect: Allow
            Principal:
              "AWS": !Ref AWS::AccountId
            Action: kms:*
            Resource: "*"
          - Sid: Allow Databricks to use KMS key for encryption and decryption
            Effect: Allow
            Principal:
              "AWS": "414351767826"
            Action:
              - kms:Encrypt
              - kms:Decrypt
            Resource: "*"
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
  # The alias for the key
  EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}
      TargetKeyId: !Ref EncryptionKey

  #------ The Databricks workspace related resources
  DBSCredentialsConfiguration:
    Type: Custom::DBSCredentialsConfiguration
    Properties:
      ServiceToken: !ImportValue dbs-account-api-CredentialsConfigurationFn-Arn
      DatabricksAccountId: !Ref DBSAccountId
      Username: !Ref DBSUsername
      Password: !Ref DBSPassword
      CredentialsName: !Sub ${AWS::StackName}_credentials
      CrossAccountRoleArn: !GetAtt DBSCrossAccountIAMRole.Arn

  DBSStorageConfiguration:
    Type: Custom::DBSStorageConfiguration
    Properties:
      ServiceToken: !ImportValue dbs-account-api-StorageConfigurationFn-Arn
      DatabricksAccountId: !Ref DBSAccountId
      Username: !Ref DBSUsername
      Password: !Ref DBSPassword
      StorageName: !Sub ${AWS::StackName}_storage
      RootBucket: !Ref DBFSRootBucket

  DBSManagedKeysConfiguration:
    Type: Custom::DBSManagedKeysConfiguration
    Properties:
      ServiceToken: !ImportValue dbs-account-api-ManagedKeysConfigurationFn-Arn
      DatabricksAccountId: !Ref DBSAccountId
      Username: !Ref DBSUsername
      Password: !Ref DBSPassword
      KeyArn: !GetAtt EncryptionKey.Arn
      KeyAlias: !Ref EncryptionKeyAlias
      UseCases:
        - MANAGED_SERVICES

  WorkspaceVpcEnpoint:
    Type: Custom::WorkspaceVpcEnpoint
    Properties:
      ServiceToken: !ImportValue dbs-account-api-VpcEnpointFn-Arn
      DatabricksAccountId: !Ref DBSAccountId
      Username: !Ref DBSUsername
      Password: !Ref DBSPassword
      EndpointName: !Sub ${AWS::StackName}_workspaceVpcEndpoint
      VpcEndpointId: !Ref DBSRestApiInterfaceEndpoint

  BackendVpcEnpoint:
    Type: Custom::BackendVpcEnpoint
    Properties:
      ServiceToken: !ImportValue dbs-account-api-VpcEnpointFn-Arn
      DatabricksAccountId: !Ref DBSAccountId
      Username: !Ref DBSUsername
      Password: !Ref DBSPassword
      EndpointName: !Sub ${AWS::StackName}_backendVpcEndpoint
      VpcEndpointId: !Ref DBSRelayInterfaceEndpoint

  DBSNetworkConfiguration:
    Type: Custom::DBSNetworkConfiguration
    Properties:
      ServiceToken: !ImportValue dbs-account-api-NetworkConfigurationFn-Arn
      DatabricksAccountId: !Ref DBSAccountId
      Username: !Ref DBSUsername
      Password: !Ref DBSPassword
      NetworkName: !Sub ${AWS::StackName}_network
      VpcId: !Ref DBSVpc
      Subnets:
        - !Ref DBSClusterSubnet1
        - !Ref DBSClusterSubnet2
      SecurityGroups:
        - !Ref DBSWorkspaceSecurityGroup
      VpcEndpoints:
        RestApiEndpointId: !Ref WorkspaceVpcEnpoint
        DataplaneRelayEndpointId: !Ref BackendVpcEnpoint

  PrivateAccessConfiguration:
    Type: Custom::PrivateAccessConfiguration
    Properties:
      ServiceToken: !ImportValue dbs-account-api-PrivateAccessConfigurationFn-Arn
      DatabricksAccountId: !Ref DBSAccountId
      Username: !Ref DBSUsername
      Password: !Ref DBSPassword
      PrivateAccessSettingsName:  !Sub ${AWS::StackName}_privateAccessSettings
      PublicAccessEnabled: true
      AllowedVpcEndpoints:
        - !Ref WorkspaceVpcEnpoint

  DatabricksWorkspace:
    Type: Custom::DatabricksWorkspace
    Properties:
      ServiceToken: !ImportValue dbs-account-api-WorkspaceFn-Arn
      DatabricksAccountId: !Ref DBSAccountId
      Username: !Ref DBSUsername
      Password: !Ref DBSPassword
      WorkspaceName: !Sub ${AWS::StackName}_workspace
      CredentialsId: !Ref DBSCredentialsConfiguration
      StorageId: !Ref DBSStorageConfiguration
      NetworkId: !Ref DBSNetworkConfiguration
      ManagedServicesKeyId: !Ref DBSManagedKeysConfiguration
      PrivateAccessId: !Ref PrivateAccessConfiguration
  
  # The Unity Catalog metastore assignment
  MetastoreAssignment:
    Type: Custom::MetastoreAssignment
    Properties:
      ServiceToken: !ImportValue dbs-account-api-UCMetastoreAssignmentFn-Arn
      DatabricksAccountId: !Ref DBSAccountId
      Username: !Ref DBSUsername
      Password: !Ref DBSPassword
      WorkspaceId: !Ref DatabricksWorkspace
      WorkspaceDeploymentName: !GetAtt DatabricksWorkspace.DeploymentName
      MetastoreId: !If
        - ShouldCreateMetastore
        - !Ref UnityCatalogMetastore
        - !Ref AWS::NoValue